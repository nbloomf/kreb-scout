[define >doc @monic.int.roots.1 := Macro(doc; [#

[define int @r1 := Rand({1;-1}) * Rand(Range(1;5))]#
[define int @r2 := Rand(Range(1;5) \\ {@r1;neg @r1})]#

[define int @s := Rand(Range(1;5))]#

[define ^int @p := FromRoots(x; {@r1;@r2})]#

Find all solutions of the following equation. \#[ [:str: Format(^int; latex; @p) :] = 0 \#]

[if (@show.solution) then [#
\textbf{Solution:} We can solve this equation by factoring. We have \#[ [:str: Format(^int; latex; @p) :] = ([:str: Format(^int; latex; FromRoots(x; {@r1})) :])([:str: Format(^int; latex; FromRoots(x; {@r2})) :]) = 0, \#] which is true if \fbox{$x = @r1$ or $x = @r2$}.
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @monic.int.roots.2 := Macro(doc; [#

[define int @r1 := Rand({1;-1}) * Rand(Range(6;9))]#
[define int @r2 := Rand(Range(3;9) \\ {@r1;neg @r1})]#

[define ^int @p := FromRoots(x; {@r1;@r2})]#

Find all solutions of the following equation. \#[ [:str: Format(^int; latex; @p) :] = 0 \#]

[if (@show.solution) then [#
\textbf{Solution:} We can solve this equation by factoring. We have \#[ [:str: Format(^int; latex; @p) :] = ([:str: Format(^int; latex; FromRoots(x; {@r1})) :])([:str: Format(^int; latex; FromRoots(x; {@r2})) :]) = 0, \#] which is true if \fbox{$x = @r1$ or $x = @r2$}.
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @quad.with.lc := Macro(doc; [#

[define int @r1 := Rand(Build(@k; int @k <- Range(-7;7); NotEqual(int; @k; 0); NotEqual(int; @k mod @lc; 0) ))]#

[define int @r2 := Rand(Range(1;5))]#

[define ^int @p := Poly((@lc).x^2; neg (@r1 + @lc*@r2).x; (@r1 * @r2).1)]#

Find all solutions of the following equation. \#[[:str: Format(^int; latex; @p) :] = 0\#]

[if (@show.solution) then [#
\textbf{Solution:} We can solve this equation by factoring. We have \#[ [:str: Format(^int; latex; @p) :] = ([:str: Format(^int; latex; Poly((@lc).x; (neg @r1).1)) :])([:str: Format(^int; latex; FromRoots(x; {@r2})) :]) = 0, \#] which is true if \fbox{$x = [:rat: int(@r1) / int(@lc) :]$ or $x = @r2$}. (We can also use the quadratic formula.)
] else []
endif]

  ]; int @lc := 2; bool @show.solution := #f
)]#




[define >doc @quad.radical.roots.1 := Macro(doc; [#

[define {int} @as := Rand(Build({@b;@c}; int @b <- Range(-10;10); int @c <- Range(-10;10); NotEqual(int; @b*@c; 0); Equal(int; 3; SquareFreePart(@b*@b - 4*@c))))]

[define int @b := AtPos(@as; 1)]#
[define int @c := AtPos(@as; 2)]#

[define ^int @p := Poly(1.x^2; (@b).x; (@c).1)]#

Find all solutions of the following equation. \#[[:str: Format(^int; latex; @p) :] = 0\#]

[if (@show.solution) then [#
\textbf{Solution:} We can try factoring this equation, but there are no two integers whose sum is $@b$ and whose product is $@c$. Instead we will use the quadratic formula as follows.
\begin{eqnarray*}
x & = & \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} \\
 & = & \frac{[:int: neg @b:] \pm \sqrt{(@b)^2 - 4(1)(@c)}}{2} \\
 & = & \frac{[:int: neg @b:] \pm \sqrt{[:int: @b*@b - 4*@c :]}}{2} \\
 & = & \frac{[:int: neg @b :] \pm [:int: SquarePart(@b*@b - 4*@c) :]\sqrt{3}}{2} \\
 & = & [:int: (neg @b) div 2 :] \pm [:int: SquarePart(@b*@b - 4*@c) div 2 :]\sqrt{3}
\end{eqnarray*}
Thus \fbox{$x = [:int: (neg @b) div 2 :] \pm [:int: SquarePart(@b*@b - 4*@c) div 2 :]\sqrt{3}$}.
] else []
endif]

  ]; bool @show.solution := #f
)]#
