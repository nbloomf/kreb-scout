[define >doc @linear.eqn.1 := Macro(doc; [#

[define int @a := Rand({1;-1;2;-2})]#
[define int @b := Rand({3;5})]#
[define int @h := Rand((Range(-7;-1) ++ Range(1;7)))]#
[define int @k := Rand((Range(-7;-1) ++ Range(1;7)))]#

Find an equation for the line passing through the point $(@h, @k)$ and having slope [:rat: int(@a) / int(@b) :].

[if (@show.solution) then [#
\textbf{Solution:} Remember that to uniquely identify a line in the plane, we need two pieces of information. In this case we know two things about this line: its slope, and a point on the line. The simplest linear equation form to use here is the point-slope form: the line with slope $m$ and passing through the point $(h,k)$ is given by the equation \#[ \frac{y - k}{x - h} = m. \#]
Here we have $m = [:rat: int(@a) / int(@b) :]$ and $(h,k) = (@h,@k)$.
So this line is given by the equation \#[ \frac{[:str: Format(^int; latex; Poly(1.y; (neg @k).1)) :]}{[:str: Format(^int; latex; Poly(1.x; (neg @h).1)) :]} = \frac{@a}{@b}. \#] We can solve this equation for $y$ to find the slope-intercept form; this yields \#[ \boxed{y = [:str: Format(^rat; latex; Poly((int(@a) / int(@b)).x; (int(@k*@b - @a*@h) / int(@b)).1)) :]} \#].
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @find.slope.1 := Macro(doc; [#

[define int @a := Rand(Range(1;7))]#
[define int @b := Rand(Range(-7;-1) ++ Range(1;7))]#
[define int @h := Rand(Range(-7;-1))]#
[define int @k := Rand(Range(-7;-1) ++ Range(1;7))]#

Find the slope between the points $(@a, @b)$ and $(@h, @k)$.

[if (@show.solution) then [#
\textbf{Solution:} Remember that the slope between the points $(x_1, y_1)$ and $(x_2, y_2)$ is \#[ \frac{y_2 - y_1}{x_2 - x_1}. \#] Here, we have $(x_1,y_1) = (@a,@b)$ and $(x_2,y_2) = (@h, @k)$, so that the slope between them is \#[ \frac{y_2 - y_1}{x_2 - x_1} = \frac{(@k) - (@b)}{(@h) - (@a)} = \frac{[:int: @k - @b :]}{[:int: @h - @a :]}. \#] So the slope between these points is \fbox{[:rat: int(@k - @b) / int(@h - @a) :]}.
] else []
endif]

  ]; bool @show.solution := #f
)]#



[define >doc @find.slope.2 := Macro(doc; [#

[define int @a := Rand(Range(1;7))]#
[define int @b := Rand(Range(-7;-1) ++ Range(1;7))]#
[define int @h := Rand(Range(-7;-1))]#

Find the slope between the points $(@a, @b)$ and $(@a, @h)$.

[if (@show.solution) then [#
\textbf{Solution:} Remember that the slope between the points $(x_1, y_1)$ and $(x_2, y_2)$ is \#[ \frac{y_2 - y_1}{x_2 - x_1}. \#] Here, we have $(x_1,y_1) = (@a,@b)$ and $(x_2,y_2) = (@a, @h)$, so that the slope between them is \#[ \frac{y_2 - y_1}{x_2 - x_1} = \frac{(@h) - (@b)}{(@a) - (@a)} = \frac{[:int: @h - @b :]}{[:int: @a - @a :]}. \#] We have a problem: the denominator of this fraction is zero. So the slope between these points is \fbox{undefined}.
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @find.midpoint.1 := Macro(doc; [#

[define int @a := Rand(Range(1;7))]#
[define int @b := Rand(Range(-7;-1) ++ Range(1;7))]#
[define int @h := Rand(Range(-7;-1))]#
[define int @k := Rand(Range(-7;-1) ++ Range(1;7))]#

Find the midpoint of the points $(@a, @b)$ and $(@h, @k)$.

[if (@show.solution) then [#
\textbf{Solution:} Remember that the midpoint of the points $(x_1, y_1)$ and $(x_2, y_2)$ is \#[ \left( \frac{x_1 + x_2}{2}, \frac{y_1 + y_2}{2} \right). \#] Here, we have $(x_1,y_1) = (@a,@b)$ and $(x_2,y_2) = (@h, @k)$, so that the midpoint is \#[ \left( \frac{x_1 + x_2}{2}, \frac{y_1 + y_2}{2} \right) = \left( \frac{(@a) + (@h)}{2}, \frac{(@b) + (@k)}{2} \right) = \left( \frac{[:int: @a + @h :]}{2}, \frac{[:int: @b + @k :]}{2} \right). \#] So the midpoint is \fbox{$([:rat: int(@a+@h) / int(2) :],[:rat: int(@b+@k)/int(2) :])$}.
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @plot.line.1 := Macro(doc; [#

[define int @b := Rand({1;2;3;-1;-2;-3})]#
[define int @s := Rand({1;-1;3;-3;4;-4})]#
[define int @t := Rand(Range(2;5) \\ {@s;neg @s})]#

Plot the graph of the linear equation $y = [:str: Format(^rat; latex; Poly((int(@s)/int(@t)).x; (int(@b)).1)) :]$ on the plane below.

[if (@show.solution) then [] else [#
\begin{center}
\CartesianPlane#[h=7,w=7,axes=yes#]
\end{center}
] endif]

[if (@show.solution) then [#
\textbf{Solution:} This line as slope $@s/@t$ and $y$-intercept $@b$. We can use this information to find two points on the line and sketch as follows.
\begin{center}
\PlotLine#[h=7,w=7,axes=yes,b={@b},rise={@s},run={@t}#]
\end{center}
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @line.through.points.1 := Macro(doc; [#

[define int @a := Rand(Range(1;7))]#
[define int @b := Rand(Range(-7;-1) ++ Range(1;7))]#
[define int @h := Rand(Range(-7;-1))]#
[define int @k := Rand(Range(-7;-1) ++ Range(1;7))]#

[define rat @m := int(@k - @b) / int(@h - @a)]#

Find an equation for the line passing through the points $(@a,@b)$ and $(@h,@k)$.

[if (@show.solution) then [#
\textbf{Solution:} We will find the point-slope form of this line. First, using the slope formula, we find that the slope of this line is \#[ m = \frac{(@k) - (@b)}{(@h) - (@a)} = @m#. \#] Since we know this line passes through (for instance) $(@a,@b)$, using the point-slope formula, an equation for this line is \#[ \frac{[:str: Format(^int; latex; Poly(1.y; (neg @b).1)) :]}{[:str: Format(^int; latex; Poly(1.x; (neg @a).1)) :]} = @m#. \#] We can solve for $y$ to get this equation in slope-intercept form as follows: \#[ \boxed{y = [:str: Format(^rat; latex; Poly((@m).x; (int(@b) - @m*int(@a)).1)) :]} \#]
] else []
endif]

  ]; bool @show.solution := #f
)]#




[define >doc @line.convert.std.to.slopeint.1 := Macro(doc; [#

[define int @a := Rand(Range(1;7))]#
[define int @b := Rand(Range(-7;-1) ++ Range(1;7))]#
[define int @c := Rand(Range(-7;-1))]#

Convert the standard form linear equation \#[ [:str: Format(^int; latex; Poly((@a).x; (@b).y)) :] = @c \#] to slope-intercept form.

[if (@show.solution) then [#
\textbf{Solution:} To convert to slope-intercept form, we simply solve this equation for $y$ to get \#[ \boxed{y = [:str: Format(^rat; latex; Poly((int(neg @a)/int(@b)).x; (int(@c)/int(@b)).1)) :]} \#]
] else []
endif]

  ]; bool @show.solution := #f
)]#

